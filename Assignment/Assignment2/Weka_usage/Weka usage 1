First, get Weka. I'm using 3.8.1 here, but the 3.6 versions are similar. I'm also using the GUI via the JAR file (java -jar weka.jar), but the executable behaves mostly the same way.
The GUI has a set of different "Applications" available via buttons: we want the "Explorer".
From the main Explorer panel, observe that we're at the "Pre-process" tab (the tabs are small, and at the top of the window). We want to "Open file...", navigate through the dialog, and select the "train.arff" file that I'm sure you've already downloaded. (-:
Observe that it lists the 94 attributes ("id", "allergic", "am", ...) in the lower-left pane, some statistics about the attributes in the upper-right pane, and a visualisation of stacked bars in the lower-right pane.
[Optional] Highlight "40 i" in the attribute list. The top-right panel summarises Weka's calculations: the attribute is numeric, with 5 distinct values ({0,1,2,3,4}). It also shows the minimum (0) and maximum (4) values, as well as the mean (0.434). The stacked bars allow you to visualise the proportion of the instances of the two classes for each value that "i" can take, but you'll need to squint to see the bars at 3 and 4. You can also choose other attributes from the drop-down (where it says "Class: class (Nom)"), but all of our other attributes are numeric and mostly take the value 0, so we won't observe anything interesting at this point. Selecting the "class" attribute from the left pane allows us to visualise the distribution of the two classes across the training instances.
Anyway, let's build a classifier on this data. Click the "Classify" tab, at the top. (It's grayed out until we load some data.)
"Choose" a classifier, by clicking the button near the top; we want "NaiveBayes" (under weka>classifiers>bayes).
There are a few different "Test options"; we could cross-validate on the training data (the default), but we've been giving a separate development set to evaluate. Let's load it by clicking the "Supplied test set" radio button, and then the "Set..." button, which opens a dialog where we can "Open file..." and navigate to "dev.arff". You can then close the "Test Instances" dialog.
Now we're ready to build an evaluate a model! Confirm the the drop-down shows "(Nom) class" (our class attribute), and click the "Start" button. On my machine, Weka can build and evaluate the Naive Bayes model in under a second. (If we had millions of tweets, this would take somewhat longer! (-: )
There is a whole lot of information in the "Classifier output" pane - school until you find "=== Evaluation on test set ===" and "=== Summary ===". Under this, it lists the (many) evaluation metrics it has calculated. Observe that there are 884 "Correctly Classified Instances" and 192 "Incorrectly Classifier Instances"; this means that the Accuracy of this system is 82.2% (recorded next to the 884). There is also a "Detailed Accuracy By Class" and a confusion matrix, which you might find useful to interpret the results.
